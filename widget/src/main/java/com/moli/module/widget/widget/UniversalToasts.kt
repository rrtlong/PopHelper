package com.moli.module.widget.widgetimport android.app.Fragmentimport android.content.Contextimport android.support.annotation.StringResimport android.view.Gravityimport org.jetbrains.anko.AnkoContextimport org.jetbrains.anko.longToastimport org.jetbrains.anko.runOnUiThreadimport org.jetbrains.anko.toastimport timber.log.Timberimport xyz.bboylin.universialtoast.UniversalToast/** * 项目名称：Jasmine * 类描述： * 创建人：liujun * 创建时间：2018/2/2 17:53 * 修改人：liujun * 修改时间：2018/2/2 17:53 * 修改备注： * @version *//** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun AnkoContext<*>.toast(@StringRes message: Int) = ctx.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun Fragment.toast(@StringRes message: Int) = activity?.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun android.support.v4.app.Fragment.toast(@StringRes message: Int) = activity?.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun Context?.toast(@StringRes message: Int): UniversalToast? {    if (this == null) return null    try {        val msg = getString(message)        if (msg.isEmpty()) {            return null        }        return UniversalToast                .makeText(this, msg, UniversalToast.LENGTH_SHORT)                .setGravity(Gravity.CENTER, 0, 0)                .apply {                    try {                        show()                    } catch (e: Exception) {                        Timber.e(e)                    }                }    } catch (e: Exception) {        Timber.e(e)        return null    }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun AnkoContext<*>.toast(message: CharSequence) = ctx.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun Fragment.toast(message: CharSequence) = activity?.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun android.support.v4.app.Fragment.toast(message: CharSequence) = activity?.toast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun Context?.toast(message: CharSequence): UniversalToast? {    if (this == null || message.isEmpty()) {        return null    }    return UniversalToast            .makeText(this, message.toString(), UniversalToast.LENGTH_SHORT)            .setGravity(Gravity.CENTER, 0, 0)            .apply {                try {                    show()                } catch (e: Exception) {                    Timber.e(e)                }            }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun AnkoContext<*>.longToast(@StringRes message: Int) = ctx.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun Fragment.longToast(@StringRes message: Int) = activity?.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun android.support.v4.app.Fragment.longToast(@StringRes message: Int) = activity?.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun Context?.longToast(message: Int): UniversalToast? {    if (this == null) {        return null    }    try {        val msg = getString(message)        if (msg.isEmpty()) {            return null        }        return UniversalToast                .makeText(this, msg, UniversalToast.LENGTH_LONG)                .setGravity(Gravity.CENTER, 0, 0)                .apply {                    try {                        show()                    } catch (e: Exception) {                        Timber.e(e)                    }                }    } catch (e: Exception) {        Timber.e(e)        return null    }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun AnkoContext<*>.longToast(message: CharSequence) = ctx.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun Fragment.longToast(message: CharSequence) = activity?.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun android.support.v4.app.Fragment.longToast(message: CharSequence) = activity?.longToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun Context?.longToast(message: CharSequence): UniversalToast? {    if (this == null || message.isEmpty()) {        return null    }    return UniversalToast            .makeText(this, message.toString(), UniversalToast.LENGTH_LONG)            .setGravity(Gravity.CENTER, 0, 0)            .apply {                try {                    show()                } catch (e: Exception) {                    Timber.e(e)                }            }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun AnkoContext<*>.safetyToast(@StringRes message: Int) = ctx.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun Fragment.safetyToast(@StringRes message: Int) = activity?.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun android.support.v4.app.Fragment.safetyToast(@StringRes message: Int) = activity?.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text resource. */fun Context?.safetyToast(@StringRes message: Int) {    if (this == null) return    runOnUiThread {        try {            UniversalToast                    .makeText(this, getString(message), UniversalToast.LENGTH_SHORT)                    .setGravity(Gravity.CENTER, 0, 0)                    .show()        } catch (e: Exception) {            Timber.e(e)        }    }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun AnkoContext<*>.safetyToast(message: CharSequence) = ctx.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun Fragment.safetyToast(message: CharSequence) = activity?.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun android.support.v4.app.Fragment.safetyToast(message: CharSequence) = activity?.safetyToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_SHORT] duration. * * @param message the message text. */fun Context?.safetyToast(message: CharSequence) {    if (this == null || message.isEmpty()) return    runOnUiThread {        try {            UniversalToast                    .makeText(this, message.toString(), UniversalToast.LENGTH_SHORT)                    .setGravity(Gravity.CENTER, 0, 0)                    .show()        } catch (e: Exception) {            Timber.e(e)        }    }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun AnkoContext<*>.safetyLongToast(@StringRes message: Int) = ctx.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun Fragment.safetyLongToast(@StringRes message: Int) = activity?.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun android.support.v4.app.Fragment.safetyLongToast(@StringRes message: Int) = activity?.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text resource. */fun Context?.safetyLongToast(@StringRes message: Int) {    if (this == null) {        return    }    runOnUiThread {        try {            UniversalToast                    .makeText(this, getString(message), UniversalToast.LENGTH_LONG)                    .setGravity(Gravity.CENTER, 0, 0)                    .show()        } catch (e: Exception) {            Timber.e(e)        }    }}/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun AnkoContext<*>.safetyLongToast(message: CharSequence) = ctx.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun Fragment.safetyLongToast(message: CharSequence) = activity?.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun android.support.v4.app.Fragment.safetyLongToast(message: CharSequence) = activity?.safetyLongToast(message)/** * Display the simple Toast message with the [UniversalToast.LENGTH_LONG] duration. * * @param message the message text. */fun Context?.safetyLongToast(message: CharSequence) {    if (this == null) {        return    }    runOnUiThread {        try {            UniversalToast                    .makeText(this, message.toString(), UniversalToast.LENGTH_LONG)                    .setGravity(Gravity.CENTER, 0, 0)                    .show()        } catch (e: Exception) {            Timber.e(e)        }    }}fun Context?.safetyShortToastBottom(message: CharSequence) {    if (this == null || message.isEmpty()) return    runOnUiThread {        try {            UniversalToast                    .makeText(this, message.toString(), UniversalToast.LENGTH_SHORT)                    .setGravity(Gravity.BOTTOM, 0, 30)                    .show()        } catch (e: Exception) {            Timber.e(e)        }    }}