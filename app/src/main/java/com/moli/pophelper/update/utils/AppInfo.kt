package com.moli.reward.app.update.utilsimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.net.Uriimport android.os.Environmentimport com.moli.pophelper.update.utils.FileProvider7import java.io.Fileobject AppInfo {    /**     * 获取App versionCode     *     * @param context     * @return     */    fun getVersionCode(context: Context?): Int {        var versionCode = 0        if (null == context) {            return versionCode        }        try {            val pm = context.packageManager            val info = pm.getPackageInfo(context.getPackageName(), 0)            versionCode = info.versionCode        } catch (e: PackageManager.NameNotFoundException) {            e.printStackTrace()        }        return versionCode    }    /**     * 从一个apk文件去获取该文件的版本信息     *     * @param context     * 本应用程序上下文     * @param archiveFilePath     * APK文件的路径。如：/sdcard/download/XX.apk     * @return     */    fun getVersionCodeFromApk(context: Context, archiveFilePath: String): Int {        val pm = context.packageManager        val packInfo = pm.getPackageArchiveInfo(archiveFilePath, PackageManager.GET_ACTIVITIES)                ?: return 0        return packInfo!!.versionCode    }    fun getApkPath(context: Context, fileName: String): String {        val folder = context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)?:String()        return folder.toString() + File.separator + fileName    }    /**     * 安装apk的Intent     * @return     */     fun createInstallApkIntent(context: Context, apk: File): Intent {        val intent = Intent(Intent.ACTION_VIEW)        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        val contentUri = Uri.fromFile(apk)//        intent.setDataAndType(contentUri, "application/vnd.android.package-archive")        FileProvider7.setIntentDataAndType(context, intent, "application/vnd.android.package-archive", apk, false)        return intent    }    /**     * Application Name     *     * @param context     * @return     */    fun getApplicationMetaValue(context: Context?, name: String): String? {        if (context == null) {            return ""        }        val pm = context.packageManager        val packageName = context.packageName        try {            val info = pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA)            if (info?.metaData != null) {                return info.metaData.getString(name)            }        } catch (e: PackageManager.NameNotFoundException) {            e.printStackTrace()        }        return ""    }}