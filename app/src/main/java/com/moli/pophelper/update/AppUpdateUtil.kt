package com.aletter.xin.app.updateimport android.content.Contextimport android.content.Intentimport android.text.TextUtilsimport com.aletter.xin.app.update.view.UpdateDialogimport com.aletter.xin.app.update.view.UpdateNotificationimport com.blankj.utilcode.util.NetworkUtilsimport com.blankj.utilcode.util.SPUtilsimport com.google.gson.Gsonimport com.moli.module.framework.utils.FileDirUtilsimport com.moli.module.model.base.VersionModelimport com.moli.module.model.constant.EventConstantimport com.moli.pophelper.BuildConfigimport com.moli.pophelper.update.services.DownloadServiceimport com.moli.reward.app.update.utils.AppInfoimport org.jetbrains.anko.toastimport org.simple.eventbus.EventBusimport org.simple.eventbus.Subscriberimport timber.log.Timberimport java.io.Fileclass AppUpdateUtil(var context: Context) {    private var apkName = ""    private var apkPath: String? = null    private var netVersionNumber: String? = null //服务器的版本code    private var localVersionNumber: String? = null /////正在运行app的版本    private var updateDialog: UpdateDialog? = null    private var fileDownload: Boolean = false //判断文件是否完整    var isDownloading: Boolean = false    var silence: Boolean = false // true 表示下载后不安装，静默下载    var version: VersionModel? = null    private var updateNotification: UpdateNotification? = null    init {        updateDialog = UpdateDialog(context, ::btnConfirmClick, ::alertConfirmClick)        EventBus.getDefault().register(this) //注册到事件主线        localVersionNumber = BuildConfig.versionNumber        apkName = "popHelper_$localVersionNumber.apk"        apkPath = FileDirUtils.getApkFile(apkName).path        val localFile = File(apkPath)        fileDownload = SPUtils.getInstance().getBoolean("apk_downloaded", false)        if (localFile.exists()) {            localFile.delete()        }    }    //确定更新    private fun btnConfirmClick(version: VersionModel?) {        if (version?.isImpose != 2) {            if (File(apkPath).exists()) {                update()            } else {                if (NetworkUtils.getNetworkType() != NetworkUtils.NetworkType.NETWORK_WIFI) {                    updateDialog?.showAlertDialog()                }            }        } else {            update()        }    }    //系统对话框被点击    private fun alertConfirmClick() {        update()    }    fun compareVersionFromJson(isSplash: Boolean) {        val versionModelStr = SPUtils.getInstance().getString("version_model")        if (!TextUtils.isEmpty(versionModelStr)) {            val versionModel = Gson().fromJson<VersionModel>(versionModelStr, VersionModel::class.java)            AppUpdateUtil(context).compareVersion(versionModel, isSplash)        }    }    fun compareVersion(version: VersionModel?, isSplash: Boolean) {        this.version = version        if (null != version) {            //            version.isImpose = 1            //            netVersionNumber = "1.0.1"            netVersionNumber = version.updateVersion            updateDialog?.initLayoutContent(version)            if (localVersionNumber == null || netVersionNumber == null) {                EventBus.getDefault().post(false, EventConstant.SPLASH_FORCE_UPDATE)                return            }            if (localVersionNumber!! < netVersionNumber!!) {                apkName = "popHelper_$netVersionNumber.apk"                apkPath = FileDirUtils.getApkFile(apkName).path                if (File(apkPath).exists() && !fileDownload) { //对于以前没下完的apk文件，直接删除                    File(apkPath).delete()                }                if (File(apkPath).exists()) {                    updateDialog?.setTitleVisibility(true)                } else {                    updateDialog?.setTitleVisibility(false)                }                if (version.isImpose == 2) {                    EventBus.getDefault().post(true, EventConstant.SPLASH_FORCE_UPDATE)                    updateDialog?.showUpdateDialog(true)                } else {                    EventBus.getDefault().post(false, EventConstant.SPLASH_FORCE_UPDATE)                    if (!isSplash) {                        if (File(apkPath).exists()) {                            updateDialog?.showUpdateDialog(false)                        } else {                            if (NetworkUtils.getNetworkType() == NetworkUtils.NetworkType.NETWORK_WIFI) {                                silence = true                                downloadFile()                            } else {                                silence = false                                updateDialog?.showUpdateDialog(false)                            }                        }                    }                }            } else {                EventBus.getDefault().post(false, EventConstant.SPLASH_FORCE_UPDATE)            }        } else {            EventBus.getDefault().post(false, EventConstant.SPLASH_FORCE_UPDATE)        }    }    private fun update() {        val file = File(apkPath)        if (file.exists()) {            isDownloading = false            context.startActivity(AppInfo.createInstallApkIntent(context, file))        } else {            if (isDownloading) {                context.toast("正在下载中，请耐心等待")            } else {                downloadFile()            }        }    }    private fun downloadFile() {        if (version == null) return        SPUtils.getInstance().put("apk_downloaded", false)        isDownloading = true        if (version?.isImpose != 2 && !silence) { //有通知栏下载            updateNotification = UpdateNotification(context)        }        //        val downloadUrl = "http://releases.b0.upaiyun.com/hoolay.apk"        val downloadUrl = version?.updateUrl        val intent = Intent(context, DownloadService::class.java)        intent.action = DownloadService.ACTION_FOO        intent.putExtra(DownloadService.EXTRA_PARAM1, downloadUrl)        intent.putExtra(DownloadService.EXTRA_PARAM2, apkPath)        intent.putExtra(DownloadService.EXTRA_PARAM3, !silence)        context.startService(intent)    }    @Subscriber(tag = EventConstant.APP_UPDATE_PROGRESS)    fun setUpdateProgress(progress: Int) {        if (version?.isImpose != 2 && !silence) { //有通知栏下载            updateNotification?.notifyProgress(progress)        }    }}